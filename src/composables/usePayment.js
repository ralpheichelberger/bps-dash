import { useAuth } from "./useAuth.js";

const { authenticateClient, api, cardID } = useAuth();

export function usePayment() {
    const topUp = async (card_id, amount, details) => {
        // Ensure client is authenticated before making the API call
        await authenticateClient();
        const topUpBody = {
            card_id: card_id,
            amount: amount,
            bill_nr: "", // is generated by the server
            paypal_details: details,
            typ: "topup",
        };
        return new Promise((resolve, reject) => {
            api.topupCredit(topUpBody, (error, data) => {
                if (error) {
                    reject(new Error("Error topping up:" + error))
                } else {
                    resolve(data);
                }
            });
        })
    };

    const payment = async (card_id, name, id, amount, dryTime, typ, details) => {
        await authenticateClient();
        if (dryTime){
            amount=amount*(dryTime/10) // FIXME hardcoded time 10 minutes per price unit
        }
        const paymentBody = {
            card_id: card_id,
            machine_name: name,
            machine_id: id,
            amount: amount,
            bill_nr: "", // is generated by the server
            typ: typ,
            paypal_details: details,
        };
        return new Promise((resolve, reject) => {
            api.payment(paymentBody, (error, data) => {
                if (error) {
                    reject(new Error("Error storing payment:" + error))
                } else {
                    resolve(data);
                }
            });
        })
    }

    const payments = async (card_id, from, to) => {
        await authenticateClient();
        return new Promise((resolve, reject) => {
            var opts = {
                from: from,
                to: to,
            }
            api.getUserPayments(card_id, opts, (error, data) => {
                if (error) {
                    reject(new Error("Error getting payments:" + error))
                } else {
                    resolve(data);
                }
            })
        })
    }

    const allowStart = (name, duration) => {
        api.allowStart(name, duration,
            (error, data, response) => {
                if (error) {
                    console.error("allowStart", error);
                    return;
                }
                console.log("allowStart", response);
            }
        );
    };

    return {
        topUp,
        allowStart,
        payment,
        payments,
    };
}