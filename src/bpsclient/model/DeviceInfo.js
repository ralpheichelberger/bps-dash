/*
 * BPS
 * Bubble Point System API
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The DeviceInfo model module.
 * @module model/DeviceInfo
 * @version 0.1.0
 */
export default class DeviceInfo {
  /**
   * Constructs a new <code>DeviceInfo</code>.
   * device information aggregated from the device, price line and shop list
   * @alias module:model/DeviceInfo
   * @class
   * @param name {String} name of the device used in MQTT communication
   * @param location {String} location of the device real address of the shop
   * @param type {String} type of the device
   * @param price {Number} price of the device in euro cent
   * @param state {String} state of the device if it is running or not
   * @param duration {Number} duration for the relay the device in 1/10 of seconds
   * @param detergent {Boolean} if detergent is available
   * @param softener {Boolean} if softener is available
   */
  constructor(name, location, type, price, state, duration, detergent, softener) {
    this.name = name;
    this.location = location;
    this.type = type;
    this.price = price;
    this.state = state;
    this.duration = duration;
    this.detergent = detergent;
    this.softener = softener;
  }

  /**
   * Constructs a <code>DeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceInfo} obj Optional instance to populate.
   * @return {module:model/DeviceInfo} The populated <code>DeviceInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DeviceInfo();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('location'))
        obj.location = ApiClient.convertToType(data['location'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('price'))
        obj.price = ApiClient.convertToType(data['price'], 'Number');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('duration'))
        obj.duration = ApiClient.convertToType(data['duration'], 'Number');
      if (data.hasOwnProperty('detergent'))
        obj.detergent = ApiClient.convertToType(data['detergent'], 'Boolean');
      if (data.hasOwnProperty('softener'))
        obj.softener = ApiClient.convertToType(data['softener'], 'Boolean');
    }
    return obj;
  }
}

/**
 * name of the device used in MQTT communication
 * @member {String} name
 */
DeviceInfo.prototype.name = undefined;

/**
 * location of the device real address of the shop
 * @member {String} location
 */
DeviceInfo.prototype.location = undefined;

/**
 * type of the device
 * @member {String} type
 */
DeviceInfo.prototype.type = undefined;

/**
 * price of the device in euro cent
 * @member {Number} price
 */
DeviceInfo.prototype.price = undefined;

/**
 * state of the device if it is running or not
 * @member {String} state
 */
DeviceInfo.prototype.state = undefined;

/**
 * duration for the relay the device in 1/10 of seconds
 * @member {Number} duration
 */
DeviceInfo.prototype.duration = undefined;

/**
 * if detergent is available
 * @member {Boolean} detergent
 */
DeviceInfo.prototype.detergent = undefined;

/**
 * if softener is available
 * @member {Boolean} softener
 */
DeviceInfo.prototype.softener = undefined;

