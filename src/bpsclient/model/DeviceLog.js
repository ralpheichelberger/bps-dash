/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceLog model module.
 * @module model/DeviceLog
 * @version 0.1.0
 */
class DeviceLog {
    /**
     * Constructs a new <code>DeviceLog</code>.
     * @alias module:model/DeviceLog
     * @param timestamp {Number} 
     * @param typ {module:model/DeviceLog.TypEnum} 
     * @param deviceId {Number} 
     * @param status {module:model/DeviceLog.StatusEnum} status message
     */
    constructor(timestamp, typ, deviceId, status) { 
        
        DeviceLog.initialize(this, timestamp, typ, deviceId, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timestamp, typ, deviceId, status) { 
        obj['timestamp'] = timestamp;
        obj['typ'] = typ;
        obj['device_id'] = deviceId;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>DeviceLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceLog} obj Optional instance to populate.
     * @return {module:model/DeviceLog} The populated <code>DeviceLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceLog();

            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('typ')) {
                obj['typ'] = ApiClient.convertToType(data['typ'], 'String');
            }
            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = ApiClient.convertToType(data['device_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceLog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceLog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['typ'] && !(typeof data['typ'] === 'string' || data['typ'] instanceof String)) {
            throw new Error("Expected the field `typ` to be a primitive type in the JSON string but got " + data['typ']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['info'] && !(typeof data['info'] === 'string' || data['info'] instanceof String)) {
            throw new Error("Expected the field `info` to be a primitive type in the JSON string but got " + data['info']);
        }

        return true;
    }


}

DeviceLog.RequiredProperties = ["timestamp", "typ", "device_id", "status"];

/**
 * @member {Number} timestamp
 */
DeviceLog.prototype['timestamp'] = undefined;

/**
 * @member {module:model/DeviceLog.TypEnum} typ
 */
DeviceLog.prototype['typ'] = undefined;

/**
 * @member {Number} device_id
 */
DeviceLog.prototype['device_id'] = undefined;

/**
 * status message
 * @member {module:model/DeviceLog.StatusEnum} status
 */
DeviceLog.prototype['status'] = undefined;

/**
 * additional information
 * @member {String} info
 */
DeviceLog.prototype['info'] = undefined;





/**
 * Allowed values for the <code>typ</code> property.
 * @enum {String}
 * @readonly
 */
DeviceLog['TypEnum'] = {

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "info"
     * @const
     */
    "info": "info",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DeviceLog['StatusEnum'] = {

    /**
     * value: "free"
     * @const
     */
    "free": "free",

    /**
     * value: "busy"
     * @const
     */
    "busy": "busy",

    /**
     * value: "payed"
     * @const
     */
    "payed": "payed",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "online"
     * @const
     */
    "online": "online",

    /**
     * value: "offline"
     * @const
     */
    "offline": "offline",

    /**
     * value: "deactivated"
     * @const
     */
    "deactivated": "deactivated"
};



export default DeviceLog;

