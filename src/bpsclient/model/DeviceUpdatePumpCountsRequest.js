/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';

/**
 * The DeviceUpdatePumpCountsRequest model module.
 * @module model/DeviceUpdatePumpCountsRequest
 * @version 0.1.0
 */
class DeviceUpdatePumpCountsRequest {
    /**
     * Constructs a new <code>DeviceUpdatePumpCountsRequest</code>.
     * @alias module:model/DeviceUpdatePumpCountsRequest
     * @param device {module:model/Device} 
     */
    constructor(device) { 
        
        DeviceUpdatePumpCountsRequest.initialize(this, device);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device) { 
        obj['device'] = device;
    }

    /**
     * Constructs a <code>DeviceUpdatePumpCountsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceUpdatePumpCountsRequest} obj Optional instance to populate.
     * @return {module:model/DeviceUpdatePumpCountsRequest} The populated <code>DeviceUpdatePumpCountsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceUpdatePumpCountsRequest();

            if (data.hasOwnProperty('device')) {
                obj['device'] = Device.constructFromObject(data['device']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceUpdatePumpCountsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceUpdatePumpCountsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceUpdatePumpCountsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          Device.validateJSON(data['device']);
        }

        return true;
    }


}

DeviceUpdatePumpCountsRequest.RequiredProperties = ["device"];

/**
 * @member {module:model/Device} device
 */
DeviceUpdatePumpCountsRequest.prototype['device'] = undefined;






export default DeviceUpdatePumpCountsRequest;

