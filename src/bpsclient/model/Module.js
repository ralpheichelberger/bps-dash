/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModulDurations from './ModulDurations';

/**
 * The Module model module.
 * @module model/Module
 * @version 0.1.0
 */
class Module {
    /**
     * Constructs a new <code>Module</code>.
     * is am MQTT enabled module
     * @alias module:model/Module
     * @param mac {String} 
     * @param binaryType {String} 
     * @param binaryVersion {String} 
     * @param updatestatus {module:model/Module.UpdatestatusEnum} 
     * @param firmware {String} firmware version of the module
     * @param lastSeen {Number} 
     * @param lastPing {Number} 
     */
    constructor(mac, binaryType, binaryVersion, updatestatus, firmware, lastSeen, lastPing) { 
        
        Module.initialize(this, mac, binaryType, binaryVersion, updatestatus, firmware, lastSeen, lastPing);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mac, binaryType, binaryVersion, updatestatus, firmware, lastSeen, lastPing) { 
        obj['mac'] = mac;
        obj['binary_type'] = binaryType;
        obj['binary_version'] = binaryVersion;
        obj['updatestatus'] = updatestatus;
        obj['firmware'] = firmware;
        obj['last_seen'] = lastSeen;
        obj['last_ping'] = lastPing;
    }

    /**
     * Constructs a <code>Module</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Module} obj Optional instance to populate.
     * @return {module:model/Module} The populated <code>Module</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Module();

            if (data.hasOwnProperty('mac')) {
                obj['mac'] = ApiClient.convertToType(data['mac'], 'String');
            }
            if (data.hasOwnProperty('binary_type')) {
                obj['binary_type'] = ApiClient.convertToType(data['binary_type'], 'String');
            }
            if (data.hasOwnProperty('binary_version')) {
                obj['binary_version'] = ApiClient.convertToType(data['binary_version'], 'String');
            }
            if (data.hasOwnProperty('updatestatus')) {
                obj['updatestatus'] = ApiClient.convertToType(data['updatestatus'], 'String');
            }
            if (data.hasOwnProperty('firmware')) {
                obj['firmware'] = ApiClient.convertToType(data['firmware'], 'String');
            }
            if (data.hasOwnProperty('last_seen')) {
                obj['last_seen'] = ApiClient.convertToType(data['last_seen'], 'Number');
            }
            if (data.hasOwnProperty('last_ping')) {
                obj['last_ping'] = ApiClient.convertToType(data['last_ping'], 'Number');
            }
            if (data.hasOwnProperty('durations')) {
                obj['durations'] = ModulDurations.constructFromObject(data['durations']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Module</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Module</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Module.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mac'] && !(typeof data['mac'] === 'string' || data['mac'] instanceof String)) {
            throw new Error("Expected the field `mac` to be a primitive type in the JSON string but got " + data['mac']);
        }
        // ensure the json data is a string
        if (data['binary_type'] && !(typeof data['binary_type'] === 'string' || data['binary_type'] instanceof String)) {
            throw new Error("Expected the field `binary_type` to be a primitive type in the JSON string but got " + data['binary_type']);
        }
        // ensure the json data is a string
        if (data['binary_version'] && !(typeof data['binary_version'] === 'string' || data['binary_version'] instanceof String)) {
            throw new Error("Expected the field `binary_version` to be a primitive type in the JSON string but got " + data['binary_version']);
        }
        // ensure the json data is a string
        if (data['updatestatus'] && !(typeof data['updatestatus'] === 'string' || data['updatestatus'] instanceof String)) {
            throw new Error("Expected the field `updatestatus` to be a primitive type in the JSON string but got " + data['updatestatus']);
        }
        // ensure the json data is a string
        if (data['firmware'] && !(typeof data['firmware'] === 'string' || data['firmware'] instanceof String)) {
            throw new Error("Expected the field `firmware` to be a primitive type in the JSON string but got " + data['firmware']);
        }
        // validate the optional field `durations`
        if (data['durations']) { // data not null
          ModulDurations.validateJSON(data['durations']);
        }

        return true;
    }


}

Module.RequiredProperties = ["mac", "binary_type", "binary_version", "updatestatus", "firmware", "last_seen", "last_ping"];

/**
 * @member {String} mac
 */
Module.prototype['mac'] = undefined;

/**
 * @member {String} binary_type
 */
Module.prototype['binary_type'] = undefined;

/**
 * @member {String} binary_version
 */
Module.prototype['binary_version'] = undefined;

/**
 * @member {module:model/Module.UpdatestatusEnum} updatestatus
 */
Module.prototype['updatestatus'] = undefined;

/**
 * firmware version of the module
 * @member {String} firmware
 */
Module.prototype['firmware'] = undefined;

/**
 * @member {Number} last_seen
 */
Module.prototype['last_seen'] = undefined;

/**
 * @member {Number} last_ping
 */
Module.prototype['last_ping'] = undefined;

/**
 * @member {module:model/ModulDurations} durations
 */
Module.prototype['durations'] = undefined;





/**
 * Allowed values for the <code>updatestatus</code> property.
 * @enum {String}
 * @readonly
 */
Module['UpdatestatusEnum'] = {

    /**
     * value: "testing"
     * @const
     */
    "ModuleUpdateStatusTesting": "testing",

    /**
     * value: "outdated"
     * @const
     */
    "ModuleUpdateStatusOutdated": "outdated",

    /**
     * value: "start"
     * @const
     */
    "ModuleUpdateStatusStart": "start",

    /**
     * value: "error"
     * @const
     */
    "ModuleUpdateStatusError": "error",

    /**
     * value: "inprogress"
     * @const
     */
    "ModuleUpdateStatusInProgress": "inprogress",

    /**
     * value: "done"
     * @const
     */
    "ModuleUpdateStatusDone": "done"
};



export default Module;

