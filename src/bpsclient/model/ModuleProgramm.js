/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceType from './DeviceType';

/**
 * The ModuleProgramm model module.
 * @module model/ModuleProgramm
 * @version 0.1.0
 */
class ModuleProgramm {
    /**
     * Constructs a new <code>ModuleProgramm</code>.
     * @alias module:model/ModuleProgramm
     * @param typ {module:model/DeviceType} 
     * @param filename {String} 
     * @param checksum {String} checksum of the binary
     * @param timestamp {Number} timestamp of the binary upload
     * @param verified {Boolean} if the binary is verified to be working correctly
     */
    constructor(typ, filename, checksum, timestamp, verified) { 
        
        ModuleProgramm.initialize(this, typ, filename, checksum, timestamp, verified);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, typ, filename, checksum, timestamp, verified) { 
        obj['typ'] = typ;
        obj['filename'] = filename;
        obj['checksum'] = checksum;
        obj['timestamp'] = timestamp;
        obj['verified'] = verified;
    }

    /**
     * Constructs a <code>ModuleProgramm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModuleProgramm} obj Optional instance to populate.
     * @return {module:model/ModuleProgramm} The populated <code>ModuleProgramm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModuleProgramm();

            if (data.hasOwnProperty('typ')) {
                obj['typ'] = DeviceType.constructFromObject(data['typ']);
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('binary')) {
                obj['binary'] = ApiClient.convertToType(data['binary'], File);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModuleProgramm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModuleProgramm</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModuleProgramm.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['info'] && !(typeof data['info'] === 'string' || data['info'] instanceof String)) {
            throw new Error("Expected the field `info` to be a primitive type in the JSON string but got " + data['info']);
        }

        return true;
    }


}

ModuleProgramm.RequiredProperties = ["typ", "filename", "checksum", "timestamp", "verified"];

/**
 * @member {module:model/DeviceType} typ
 */
ModuleProgramm.prototype['typ'] = undefined;

/**
 * @member {String} filename
 */
ModuleProgramm.prototype['filename'] = undefined;

/**
 * module programm binary
 * @member {File} binary
 */
ModuleProgramm.prototype['binary'] = undefined;

/**
 * version of the binary
 * @member {String} version
 */
ModuleProgramm.prototype['version'] = undefined;

/**
 * checksum of the binary
 * @member {String} checksum
 */
ModuleProgramm.prototype['checksum'] = undefined;

/**
 * timestamp of the binary upload
 * @member {Number} timestamp
 */
ModuleProgramm.prototype['timestamp'] = undefined;

/**
 * if the binary is verified to be working correctly
 * @member {Boolean} verified
 */
ModuleProgramm.prototype['verified'] = undefined;

/**
 * additional info
 * @member {String} info
 */
ModuleProgramm.prototype['info'] = undefined;






export default ModuleProgramm;

