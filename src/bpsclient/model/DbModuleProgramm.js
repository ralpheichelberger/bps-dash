/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DbModuleProgramm model module.
 * @module model/DbModuleProgramm
 * @version 0.1.0
 */
class DbModuleProgramm {
    /**
     * Constructs a new <code>DbModuleProgramm</code>.
     * @alias module:model/DbModuleProgramm
     * @param filename {String} name of the file
     * @param content {File} 
     * @param typ {String} type of the device is freely definable (typically washer, dryer, pump)
     * @param version {String} 
     * @param timestamp {Number} 
     * @param checksum {String} 
     * @param verified {Boolean} 
     * @param status {module:model/DbModuleProgramm.StatusEnum} 
     * @param info {String} additional info
     */
    constructor(filename, content, typ, version, timestamp, checksum, verified, status, info) { 
        
        DbModuleProgramm.initialize(this, filename, content, typ, version, timestamp, checksum, verified, status, info);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filename, content, typ, version, timestamp, checksum, verified, status, info) { 
        obj['filename'] = filename;
        obj['content'] = content;
        obj['typ'] = typ;
        obj['version'] = version;
        obj['timestamp'] = timestamp;
        obj['checksum'] = checksum;
        obj['verified'] = verified;
        obj['status'] = status;
        obj['info'] = info;
    }

    /**
     * Constructs a <code>DbModuleProgramm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DbModuleProgramm} obj Optional instance to populate.
     * @return {module:model/DbModuleProgramm} The populated <code>DbModuleProgramm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DbModuleProgramm();

            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], File);
            }
            if (data.hasOwnProperty('typ')) {
                obj['typ'] = ApiClient.convertToType(data['typ'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DbModuleProgramm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DbModuleProgramm</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DbModuleProgramm.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['typ'] && !(typeof data['typ'] === 'string' || data['typ'] instanceof String)) {
            throw new Error("Expected the field `typ` to be a primitive type in the JSON string but got " + data['typ']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['info'] && !(typeof data['info'] === 'string' || data['info'] instanceof String)) {
            throw new Error("Expected the field `info` to be a primitive type in the JSON string but got " + data['info']);
        }

        return true;
    }


}

DbModuleProgramm.RequiredProperties = ["filename", "content", "typ", "version", "timestamp", "checksum", "verified", "status", "info"];

/**
 * name of the file
 * @member {String} filename
 */
DbModuleProgramm.prototype['filename'] = undefined;

/**
 * @member {File} content
 */
DbModuleProgramm.prototype['content'] = undefined;

/**
 * type of the device is freely definable (typically washer, dryer, pump)
 * @member {String} typ
 */
DbModuleProgramm.prototype['typ'] = undefined;

/**
 * @member {String} version
 */
DbModuleProgramm.prototype['version'] = undefined;

/**
 * @member {Number} timestamp
 */
DbModuleProgramm.prototype['timestamp'] = undefined;

/**
 * @member {String} checksum
 */
DbModuleProgramm.prototype['checksum'] = undefined;

/**
 * @member {Boolean} verified
 */
DbModuleProgramm.prototype['verified'] = undefined;

/**
 * @member {module:model/DbModuleProgramm.StatusEnum} status
 */
DbModuleProgramm.prototype['status'] = undefined;

/**
 * additional info
 * @member {String} info
 */
DbModuleProgramm.prototype['info'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DbModuleProgramm['StatusEnum'] = {

    /**
     * value: "uploaded"
     * @const
     */
    "ModuleProgrammStatusUploaded": "uploaded",

    /**
     * value: "installing"
     * @const
     */
    "ModuleProgrammStatusInstalling": "installing",

    /**
     * value: "testing"
     * @const
     */
    "ModuleProgrammStatusTesting": "testing",

    /**
     * value: "testing_download"
     * @const
     */
    "ModuleProgrammStatusTestingDownload": "testing_download",

    /**
     * value: "testing_mqtt"
     * @const
     */
    "ModuleProgrammStatusTestingMQTT": "testing_mqtt",

    /**
     * value: "testing_mqtt_go"
     * @const
     */
    "ModuleProgrammStatusTestingMQTTGo": "testing_mqtt_go",

    /**
     * value: "verified"
     * @const
     */
    "ModuleProgrammStatusVerified": "verified",

    /**
     * value: "error"
     * @const
     */
    "ModuleProgrammStatusError": "error"
};



export default DbModuleProgramm;

