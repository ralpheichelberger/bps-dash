/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../BpsApiClient';

/**
 * The Pump model module.
 * @module model/Pump
 * @version 0.1.0
 */
class Pump {
    /**
     * Constructs a new <code>Pump</code>.
     * @alias module:model/Pump
     * @param id {Number} id of the pump relay
     * @param nr {Number} number of the pump on the pump relay
     * @param timestamp {Number} last started (will be timely restricted)
     * @param count {Number} count will be restricted in times started)
     */
    constructor(id, nr, timestamp, count) { 
        
        Pump.initialize(this, id, nr, timestamp, count);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, nr, timestamp, count) { 
        obj['id'] = id;
        obj['nr'] = nr;
        obj['timestamp'] = timestamp;
        obj['count'] = count;
    }

    /**
     * Constructs a <code>Pump</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pump} obj Optional instance to populate.
     * @return {module:model/Pump} The populated <code>Pump</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pump();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('nr')) {
                obj['nr'] = ApiClient.convertToType(data['nr'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pump</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pump</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Pump.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Pump.RequiredProperties = ["id", "nr", "timestamp", "count"];

/**
 * id of the pump relay
 * @member {Number} id
 */
Pump.prototype['id'] = undefined;

/**
 * number of the pump on the pump relay
 * @member {Number} nr
 */
Pump.prototype['nr'] = undefined;

/**
 * last started (will be timely restricted)
 * @member {Number} timestamp
 */
Pump.prototype['timestamp'] = undefined;

/**
 * count will be restricted in times started)
 * @member {Number} count
 */
Pump.prototype['count'] = undefined;






export default Pump;

