/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TypDevices from './TypDevices';

/**
 * The LocationTypDevices model module.
 * @module model/LocationTypDevices
 * @version 0.1.0
 */
class LocationTypDevices {
    /**
     * Constructs a new <code>LocationTypDevices</code>.
     * @alias module:model/LocationTypDevices
     * @param location {String} 
     * @param typDevices {Array.<module:model/TypDevices>} 
     */
    constructor(location, typDevices) { 
        
        LocationTypDevices.initialize(this, location, typDevices);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location, typDevices) { 
        obj['location'] = location;
        obj['typ_devices'] = typDevices;
    }

    /**
     * Constructs a <code>LocationTypDevices</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationTypDevices} obj Optional instance to populate.
     * @return {module:model/LocationTypDevices} The populated <code>LocationTypDevices</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationTypDevices();

            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('typ_devices')) {
                obj['typ_devices'] = ApiClient.convertToType(data['typ_devices'], [TypDevices]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationTypDevices</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationTypDevices</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LocationTypDevices.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        if (data['typ_devices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['typ_devices'])) {
                throw new Error("Expected the field `typ_devices` to be an array in the JSON data but got " + data['typ_devices']);
            }
            // validate the optional field `typ_devices` (array)
            for (const item of data['typ_devices']) {
                TypDevices.validateJSON(item);
            };
        }

        return true;
    }


}

LocationTypDevices.RequiredProperties = ["location", "typ_devices"];

/**
 * @member {String} location
 */
LocationTypDevices.prototype['location'] = undefined;

/**
 * @member {Array.<module:model/TypDevices>} typ_devices
 */
LocationTypDevices.prototype['typ_devices'] = undefined;






export default LocationTypDevices;

