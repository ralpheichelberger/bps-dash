/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceState from './DeviceState';
import DeviceType from './DeviceType';

/**
 * The DeviceData model module.
 * @module model/DeviceData
 * @version 0.1.0
 */
class DeviceData {
    /**
     * Constructs a new <code>DeviceData</code>.
     * data from the device
     * @alias module:model/DeviceData
     * @param nr {Number} 
     * @param typ {module:model/DeviceType} 
     * @param price {Number} price of the device in euro cent
     * @param detergent {Boolean} if detergent is available
     * @param softener {Boolean} if softener is available
     * @param state {module:model/DeviceState} 
     */
    constructor(nr, typ, price, detergent, softener, state) { 
        
        DeviceData.initialize(this, nr, typ, price, detergent, softener, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nr, typ, price, detergent, softener, state) { 
        obj['nr'] = nr;
        obj['typ'] = typ;
        obj['price'] = price;
        obj['detergent'] = detergent;
        obj['softener'] = softener;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>DeviceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceData} obj Optional instance to populate.
     * @return {module:model/DeviceData} The populated <code>DeviceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceData();

            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('nr')) {
                obj['nr'] = ApiClient.convertToType(data['nr'], 'Number');
            }
            if (data.hasOwnProperty('typ')) {
                obj['typ'] = DeviceType.constructFromObject(data['typ']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('detergent')) {
                obj['detergent'] = ApiClient.convertToType(data['detergent'], 'Boolean');
            }
            if (data.hasOwnProperty('softener')) {
                obj['softener'] = ApiClient.convertToType(data['softener'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = DeviceState.constructFromObject(data['state']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }

        return true;
    }


}

DeviceData.RequiredProperties = ["nr", "typ", "price", "detergent", "softener", "state"];

/**
 * @member {String} location
 */
DeviceData.prototype['location'] = undefined;

/**
 * @member {Number} nr
 */
DeviceData.prototype['nr'] = undefined;

/**
 * @member {module:model/DeviceType} typ
 */
DeviceData.prototype['typ'] = undefined;

/**
 * price of the device in euro cent
 * @member {Number} price
 */
DeviceData.prototype['price'] = undefined;

/**
 * if detergent is available
 * @member {Boolean} detergent
 */
DeviceData.prototype['detergent'] = undefined;

/**
 * if softener is available
 * @member {Boolean} softener
 */
DeviceData.prototype['softener'] = undefined;

/**
 * @member {module:model/DeviceState} state
 */
DeviceData.prototype['state'] = undefined;






export default DeviceData;

