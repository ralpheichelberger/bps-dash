/**
 * BPS
 * Bubble Point System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreditJournal from '../model/CreditJournal';
import Device from '../model/Device';
import DeviceInfo from '../model/DeviceInfo';
import DeviceType from '../model/DeviceType';
import DeviceUpdateLastPingRequest from '../model/DeviceUpdateLastPingRequest';
import DeviceUpdatePumpCountsRequest from '../model/DeviceUpdatePumpCountsRequest';
import DeviceUpdateStatusRequest from '../model/DeviceUpdateStatusRequest';
import GetUserByTokenRequest from '../model/GetUserByTokenRequest';
import Location from '../model/Location';
import MailTo200Response from '../model/MailTo200Response';
import MailToRequest from '../model/MailToRequest';
import Marketing from '../model/Marketing';
import ModuleProgramm200Response from '../model/ModuleProgramm200Response';
import Payment from '../model/Payment';
import PaymentRequest from '../model/PaymentRequest';
import PriceLine from '../model/PriceLine';
import Status from '../model/Status';
import TopupCreditRequest from '../model/TopupCreditRequest';
import UpdateModuleBinary404Response from '../model/UpdateModuleBinary404Response';
import User from '../model/User';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allowStart operation.
     * @callback module:api/DefaultApi~allowStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the start of a washer or dryer
     * @param {String} name The name of the device
     * @param {Number} value value / ms or count
     * @param {module:api/DefaultApi~allowStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    allowStart(name, value, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling allowStart");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling allowStart");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/allowstart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDevice operation.
     * @callback module:api/DefaultApi~deleteDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device
     * @param {String} location The shop location ID
     * @param {module:model/DeviceType} typ The type of the device
     * @param {Number} nr The number of the device
     * @param {module:api/DefaultApi~deleteDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    deleteDevice(location, typ, nr, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling deleteDevice");
      }
      // verify the required parameter 'typ' is set
      if (typ === undefined || typ === null) {
        throw new Error("Missing the required parameter 'typ' when calling deleteDevice");
      }
      // verify the required parameter 'nr' is set
      if (nr === undefined || nr === null) {
        throw new Error("Missing the required parameter 'nr' when calling deleteDevice");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location,
        'typ': typ,
        'nr': nr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/device', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceUpdateLastPing operation.
     * @callback module:api/DefaultApi~deviceUpdateLastPingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the last ping of a device
     * @param {module:model/DeviceUpdateLastPingRequest} deviceUpdateLastPingRequest 
     * @param {module:api/DefaultApi~deviceUpdateLastPingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    deviceUpdateLastPing(deviceUpdateLastPingRequest, callback) {
      let postBody = deviceUpdateLastPingRequest;
      // verify the required parameter 'deviceUpdateLastPingRequest' is set
      if (deviceUpdateLastPingRequest === undefined || deviceUpdateLastPingRequest === null) {
        throw new Error("Missing the required parameter 'deviceUpdateLastPingRequest' when calling deviceUpdateLastPing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/device_update_last_ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceUpdatePumpCounts operation.
     * @callback module:api/DefaultApi~deviceUpdatePumpCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the pump counts of a device
     * @param {module:model/DeviceUpdatePumpCountsRequest} deviceUpdatePumpCountsRequest 
     * @param {module:api/DefaultApi~deviceUpdatePumpCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    deviceUpdatePumpCounts(deviceUpdatePumpCountsRequest, callback) {
      let postBody = deviceUpdatePumpCountsRequest;
      // verify the required parameter 'deviceUpdatePumpCountsRequest' is set
      if (deviceUpdatePumpCountsRequest === undefined || deviceUpdatePumpCountsRequest === null) {
        throw new Error("Missing the required parameter 'deviceUpdatePumpCountsRequest' when calling deviceUpdatePumpCounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/device_update_pump_counts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceUpdateStatus operation.
     * @callback module:api/DefaultApi~deviceUpdateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of a device
     * @param {module:model/DeviceUpdateStatusRequest} deviceUpdateStatusRequest 
     * @param {module:api/DefaultApi~deviceUpdateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    deviceUpdateStatus(deviceUpdateStatusRequest, callback) {
      let postBody = deviceUpdateStatusRequest;
      // verify the required parameter 'deviceUpdateStatusRequest' is set
      if (deviceUpdateStatusRequest === undefined || deviceUpdateStatusRequest === null) {
        throw new Error("Missing the required parameter 'deviceUpdateStatusRequest' when calling deviceUpdateStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/device_update_status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditJournal operation.
     * @callback module:api/DefaultApi~getCreditJournalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditJournal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a journal of all credits from and to date
     * @param {Number} from UTC timestamp start from
     * @param {Number} to UTC timestamp end at
     * @param {Object} opts Optional parameters
     * @param {String} [cardId] 
     * @param {module:api/DefaultApi~getCreditJournalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditJournal}
     */
    getCreditJournal(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getCreditJournal");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getCreditJournal");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'card_id': opts['cardId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditJournal;
      return this.apiClient.callApi(
        '/credit_journal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevice operation.
     * @callback module:api/DefaultApi~getDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a device
     * @param {String} location The shop location ID
     * @param {module:model/DeviceType} typ The type of the device
     * @param {Number} nr The number of the device
     * @param {module:api/DefaultApi~getDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    getDevice(location, typ, nr, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling getDevice");
      }
      // verify the required parameter 'typ' is set
      if (typ === undefined || typ === null) {
        throw new Error("Missing the required parameter 'typ' when calling getDevice");
      }
      // verify the required parameter 'nr' is set
      if (nr === undefined || nr === null) {
        throw new Error("Missing the required parameter 'nr' when calling getDevice");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location,
        'typ': typ,
        'nr': nr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceById operation.
     * @callback module:api/DefaultApi~getDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a device by the ID
     * @param {String} id The ID of the device
     * @param {module:api/DefaultApi~getDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    getDeviceById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceById");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/device_by_id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceByMac operation.
     * @callback module:api/DefaultApi~getDeviceByMacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a device by the module MAC
     * @param {String} mac The MAC of the module
     * @param {module:api/DefaultApi~getDeviceByMacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    getDeviceByMac(mac, callback) {
      let postBody = null;
      // verify the required parameter 'mac' is set
      if (mac === undefined || mac === null) {
        throw new Error("Missing the required parameter 'mac' when calling getDeviceByMac");
      }

      let pathParams = {
      };
      let queryParams = {
        'mac': mac
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/device_by_mac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceInfo operation.
     * @callback module:api/DefaultApi~getDeviceInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a device information
     * @param {String} location The shop location ID
     * @param {module:model/DeviceType} typ The type of the device
     * @param {Number} nr The number of the device
     * @param {module:api/DefaultApi~getDeviceInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInfo}
     */
    getDeviceInfo(location, typ, nr, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling getDeviceInfo");
      }
      // verify the required parameter 'typ' is set
      if (typ === undefined || typ === null) {
        throw new Error("Missing the required parameter 'typ' when calling getDeviceInfo");
      }
      // verify the required parameter 'nr' is set
      if (nr === undefined || nr === null) {
        throw new Error("Missing the required parameter 'nr' when calling getDeviceInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location,
        'typ': typ,
        'nr': nr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceInfo;
      return this.apiClient.callApi(
        '/device_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevices operation.
     * @callback module:api/DefaultApi~getDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of device
     * @param {Object} opts Optional parameters
     * @param {String} [location] The shop location ID as a filter - if not given or empty devices of all shops are returned
     * @param {module:api/DefaultApi~getDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    getDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location': opts['location']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Device];
      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocation operation.
     * @callback module:api/DefaultApi~getLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a location
     * @param {String} id the unique location ID
     * @param {module:api/DefaultApi~getLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    getLocation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLocation");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocations operation.
     * @callback module:api/DefaultApi~getLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Location>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of locations
     * @param {module:api/DefaultApi~getLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Location>}
     */
    getLocations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Location];
      return this.apiClient.callApi(
        '/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketing operation.
     * @callback module:api/DefaultApi~getMarketingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Marketing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a marketing logging by code and uuid
     * @param {String} code The marketing code
     * @param {String} uuid The user UUID
     * @param {module:api/DefaultApi~getMarketingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Marketing}
     */
    getMarketing(code, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getMarketing");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getMarketing");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'uuid': uuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Marketing;
      return this.  apiClient.callApi(
        '/marketing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/DefaultApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of payments
     * @param {Number} from UTC timestamp start from
     * @param {Number} to UTC timestamp end at
     * @param {module:api/DefaultApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payment>}
     */
    getPayments(from, to, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getPayments");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getPayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Payment];
      return this.apiClient.callApi(
        '/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPriceLine operation.
     * @callback module:api/DefaultApi~getPriceLineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PriceLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a price line
     * @param {String} id the unique price line ID
     * @param {module:api/DefaultApi~getPriceLineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PriceLine}
     */
    getPriceLine(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPriceLine");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PriceLine;
      return this.apiClient.callApi(
        '/price_line', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPriceLines operation.
     * @callback module:api/DefaultApi~getPriceLinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PriceLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of price lines
     * @param {module:api/DefaultApi~getPriceLinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PriceLine>}
     */
    getPriceLines(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PriceLine];
      return this.apiClient.callApi(
        '/price_lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user with credit info
     * @param {String} id the unique 9 characters card ID
     * @param {module:api/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByToken operation.
     * @callback module:api/DefaultApi~getUserByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user by the token
     * @param {module:model/GetUserByTokenRequest} getUserByTokenRequest 
     * @param {module:api/DefaultApi~getUserByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserByToken(getUserByTokenRequest, callback) {
      let postBody = getUserByTokenRequest;
      // verify the required parameter 'getUserByTokenRequest' is set
      if (getUserByTokenRequest === undefined || getUserByTokenRequest === null) {
        throw new Error("Missing the required parameter 'getUserByTokenRequest' when calling getUserByToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user_by_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailTo operation.
     * @callback module:api/DefaultApi~mailToCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an email to the support
     * @param {module:model/MailToRequest} mailToRequest 
     * @param {module:api/DefaultApi~mailToCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTo200Response}
     */
    mailTo(mailToRequest, callback) {
      let postBody = mailToRequest;
      // verify the required parameter 'mailToRequest' is set
      if (mailToRequest === undefined || mailToRequest === null) {
        throw new Error("Missing the required parameter 'mailToRequest' when calling mailTo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MailTo200Response;
      return this.apiClient.callApi(
        '/mail_to', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moduleProgramm operation.
     * @callback module:api/DefaultApi~moduleProgrammCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModuleProgramm200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeviceType} typ 
     * @param {String} version 
     * @param {File} file 
     * @param {module:api/DefaultApi~moduleProgrammCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModuleProgramm200Response}
     */
    moduleProgramm(typ, version, file, callback) {
      let postBody = null;
      // verify the required parameter 'typ' is set
      if (typ === undefined || typ === null) {
        throw new Error("Missing the required parameter 'typ' when calling moduleProgramm");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling moduleProgramm");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling moduleProgramm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'typ': typ,
        'version': version,
        'file': file
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModuleProgramm200Response;
      return this.apiClient.callApi(
        '/module_programm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newDevice operation.
     * @callback module:api/DefaultApi~newDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new device
     * @param {module:model/Device} device The device object to be created
     * @param {module:api/DefaultApi~newDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    newDevice(device, callback) {
      let postBody = device;
      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling newDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newLocation operation.
     * @callback module:api/DefaultApi~newLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new location
     * @param {module:model/Location} location The location object to be created
     * @param {module:api/DefaultApi~newLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    newLocation(location, callback) {
      let postBody = location;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling newLocation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/location', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newMarketing operation.
     * @callback module:api/DefaultApi~newMarketingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a marketing email to all users
     * @param {module:model/Marketing} marketing 
     * @param {module:api/DefaultApi~newMarketingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTo200Response}
     */
    newMarketing(marketing, callback) {
      let postBody = marketing;
      // verify the required parameter 'marketing' is set
      if (marketing === undefined || marketing === null) {
        throw new Error("Missing the required parameter 'marketing' when calling newMarketing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MailTo200Response;
      return this.apiClient.callApi(
        '/marketing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newPriceLine operation.
     * @callback module:api/DefaultApi~newPriceLineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new price line
     * @param {module:model/PriceLine} priceLine The price line object to be created
     * @param {module:api/DefaultApi~newPriceLineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    newPriceLine(priceLine, callback) {
      let postBody = priceLine;
      // verify the required parameter 'priceLine' is set
      if (priceLine === undefined || priceLine === null) {
        throw new Error("Missing the required parameter 'priceLine' when calling newPriceLine");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/price_line', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payment operation.
     * @callback module:api/DefaultApi~paymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a credit journal entry and updates the user's credit
     * @param {module:model/PaymentRequest} paymentRequest 
     * @param {module:api/DefaultApi~paymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    payment(paymentRequest, callback) {
      let postBody = paymentRequest;
      // verify the required parameter 'paymentRequest' is set
      if (paymentRequest === undefined || paymentRequest === null) {
        throw new Error("Missing the required parameter 'paymentRequest' when calling payment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the robotsTxtGet operation.
     * @callback module:api/DefaultApi~robotsTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns robots.txt
     * @param {module:api/DefaultApi~robotsTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    robotsTxtGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/robots.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGet operation.
     * @callback module:api/DefaultApi~testGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns OK
     * @param {module:api/DefaultApi~testGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    testGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topupCredit operation.
     * @callback module:api/DefaultApi~topupCreditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a credit journal entry and updates the user's credit
     * @param {module:model/TopupCreditRequest} topupCreditRequest 
     * @param {module:api/DefaultApi~topupCreditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    topupCredit(topupCreditRequest, callback) {
      let postBody = topupCreditRequest;
      // verify the required parameter 'topupCreditRequest' is set
      if (topupCreditRequest === undefined || topupCreditRequest === null) {
        throw new Error("Missing the required parameter 'topupCreditRequest' when calling topupCredit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/topup_credit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDevice operation.
     * @callback module:api/DefaultApi~updateDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing device
     * @param {module:model/Device} device The updated device object
     * @param {module:api/DefaultApi~updateDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    updateDevice(device, callback) {
      let postBody = device;
      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling updateDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/device', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMarketing operation.
     * @callback module:api/DefaultApi~updateMarketingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a marketing logging by code and uuid
     * @param {module:model/Marketing} marketing 
     * @param {module:api/DefaultApi~updateMarketingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTo200Response}
     */
    updateMarketing(marketing, callback) {
      let postBody = marketing;
      // verify the required parameter 'marketing' is set
      if (marketing === undefined || marketing === null) {
        throw new Error("Missing the required parameter 'marketing' when calling updateMarketing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MailTo200Response;
      return this.apiClient.callApi(
        '/marketing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModuleBinary operation.
     * @callback module:api/DefaultApi~updateModuleBinaryCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the binary programm for a module
     * @param {module:api/DefaultApi~updateModuleBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    updateModuleBinary(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/update_module_binary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the user's name and active status
     * @param {module:model/User} user The updated user object
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUser(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
