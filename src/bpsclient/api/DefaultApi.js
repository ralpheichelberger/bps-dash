/*
 * BPS
 * Bubble Point System API
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreditJournal from '../model/CreditJournal';
import Customer from '../model/Customer';
import CustomerBody from '../model/CustomerBody';
import DeviceInfo from '../model/DeviceInfo';
import InlineResponse201 from '../model/InlineResponse201';
import Status from '../model/Status';
import Washer from '../model/Washer';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addCreditJournal operation.
     * @callback moduleapi/DefaultApi~addCreditJournalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds new lines to the journal for credits or deductions.
     * @param {Array.<module:model/CreditJournal>} body 
     * @param {module:api/DefaultApi~addCreditJournalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addCreditJournal(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCreditJournal");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/credit_journal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the allowStart operation.
     * @callback moduleapi/DefaultApi~allowStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns OK
     * @param {String} mac mac address of module
     * @param {Number} value value / ms or count
     * @param {module:api/DefaultApi~allowStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    allowStart(mac, value, callback) {
      
      let postBody = null;
      // verify the required parameter 'mac' is set
      if (mac === undefined || mac === null) {
        throw new Error("Missing the required parameter 'mac' when calling allowStart");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling allowStart");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'mac': mac,'value': value
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;

      return this.apiClient.callApi(
        '/allowstart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deviceInfo operation.
     * @callback moduleapi/DefaultApi~deviceInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a module with module type
     * @param {String} alias the alias that describes the specifice module ShopId+moduleId
     * @param {module:api/DefaultApi~deviceInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deviceInfo(alias, callback) {
      
      let postBody = null;
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling deviceInfo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'alias': alias
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceInfo;

      return this.apiClient.callApi(
        '/device_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCreditJournal operation.
     * @callback moduleapi/DefaultApi~getCreditJournalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditJournal{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a journal of all credits from and to date
     * @param {Number} from UTC timestamp start from
     * @param {Number} to UTC timestamp end at
     * @param {Object} opts Optional parameters
     * @param {String} opts.cardId 
     * @param {module:api/DefaultApi~getCreditJournalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCreditJournal(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getCreditJournal");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getCreditJournal");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from': from,'to': to,'card_id': opts['cardId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditJournal;

      return this.apiClient.callApi(
        '/credit_journal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomer operation.
     * @callback moduleapi/DefaultApi~getCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a customer with credit info
     * @param {String} id the unique 9 characters card ID
     * @param {module:api/DefaultApi~getCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomer(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomer");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Customer;

      return this.apiClient.callApi(
        '/customer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerAccount operation.
     * @callback moduleapi/DefaultApi~getCustomerAccountCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the customers user account
     * @param {String} cardId 
     * @param {module:api/DefaultApi~getCustomerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerAccount(cardId, callback) {
      
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getCustomerAccount");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/B/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRootDefaultHtml operation.
     * @callback moduleapi/DefaultApi~getRootDefaultHtmlCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns default HTML for the root path
     * @param {module:api/DefaultApi~getRootDefaultHtmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRootDefaultHtml(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWasher operation.
     * @callback moduleapi/DefaultApi~getWasherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Washer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a washer
     * @param {String} alias The alias that describes the specific module ShopId+moduleId
     * @param {module:api/DefaultApi~getWasherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWasher(alias, callback) {
      
      let postBody = null;
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling getWasher");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'alias': alias
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Washer;

      return this.apiClient.callApi(
        '/washer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWashers operation.
     * @callback moduleapi/DefaultApi~getWashersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Washer>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of washer
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The shop location ID as a filter - if not given or empty washers of all shops are returned
     * @param {module:api/DefaultApi~getWashersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWashers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'location': opts['location']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Washer];

      return this.apiClient.callApi(
        '/washers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the newWasher operation.
     * @callback moduleapi/DefaultApi~newWasherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Washer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new washer
     * @param {module:model/Washer} body The washer object to be created
     * @param {module:api/DefaultApi~newWasherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    newWasher(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling newWasher");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Washer;

      return this.apiClient.callApi(
        '/washer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the robotsTxtGet operation.
     * @callback moduleapi/DefaultApi~robotsTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns robots.txt
     * @param {module:api/DefaultApi~robotsTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    robotsTxtGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/robots.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the testGet operation.
     * @callback moduleapi/DefaultApi~testGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns OK
     * @param {module:api/DefaultApi~testGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    testGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;

      return this.apiClient.callApi(
        '/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback moduleapi/DefaultApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the customer&#x27;s name and active status
     * @param {String} id The unique 9 characters card ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerBody} opts.body 
     * @param {module:api/DefaultApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCustomer(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCustomer");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/customer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateWasher operation.
     * @callback moduleapi/DefaultApi~updateWasherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Washer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing washer
     * @param {module:model/Washer} body The updated washer object
     * @param {module:api/DefaultApi~updateWasherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateWasher(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWasher");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Washer;

      return this.apiClient.callApi(
        '/washer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}